name: Release

on: workflow_dispatch

env:
  IMAGE_NAME: semantic

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    name: Generate release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          extra_plugins: |
            @semantic-release/git
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  backmerge:
    name: Backmerge to development
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
          ref: main
      - name: Setup Git config
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Merge main in development
        run: |
          git checkout development
          git merge origin/main
          git push

  build-publish-v2:
    needs: release
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/bazinga-tv/semantic
          tags: |
            type=sha,format=long
            type=semver,pattern={{version}},value=${{ needs.release.outputs.new_version }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build images
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push images
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          GITREF=$(echo $GITHUB_SHA | sed 's/.*\(.........\)/\1/')
          VERSION=${{ needs.release.outputs.new_version }}

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$GITREF
          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$GITREF

  sentry:
    name: Create Sentry release
    runs-on: ubuntu-latest
    needs: build-publish-v2
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run account container
        run: docker run --name=tmp -d ${{ needs.build-publish-v2.outputs.image-name }} sh -c "while :; do echo 'Hit CTRL+C'; sleep 1; done" # Needed to avoid the container from failing
      - name: Get dist source code
        run: docker cp tmp:/app/dist ./dist
      - name: Sentry Release
        run: echo "success"
